---
import type {GetStaticPaths} from "astro";
import MainLayout from "@layouts/MainLayout.astro";
import PokemonsCard from "@components/Pokemons/PokemonsCard.astro";
import type {PokemonListResponse} from "@interfaces/pokemonResponse";
import Title from "@components/shared/Title.astro";
import {Icon} from "astro-icon/components";

export const getStaticPaths = (async () => {
  const resp = await fetch("https://pokeapi.co/api/v2/pokemon?limit=151");
  const {results} = (await resp.json()) as PokemonListResponse;

  return results.map(({name, url}) => ({
    params: {name},
    props: {name, url},
  }));
}) satisfies GetStaticPaths;

const {name} = Astro.params;
const {url} = Astro.props;

const id = url.split("/").at(-2);

const audioSrc = `https://raw.githubusercontent.com/PokeAPI/cries/main/cries/pokemon/latest/${id}.ogg`;
const imageSrc = `https://raw.githubusercontent.com/PokeAPI/sprites/master/sprites/pokemon/other/official-artwork/${id}.png`;
---

<MainLayout
  title={`Pokémon - #${id} ${name}`}
  description={`Información sobre el pokémon ${name}`}
  image={imageSrc}
>
  <section class="mt-10 mx-10 flex flex-col justify-center items-center">
    <div class="flex flex-row gap-4">
      <div>
        <button onclick="window.history.back()" class="text-blue-500"
          >Regresar</button
        >
        <Title>{name}</Title>
      </div>

      <button
        type="button"
        id="btn-favorite"
        class="ml-4"
        data-name={name}
        data-id={id}
      >
        <Icon data-outline name="heart-outline" size={50} />
        <Icon data-full class="hidden" name="heart-full" size={50} />
      </button>
    </div>
  </section>

  <PokemonsCard name={name} url={url} />

  <div class="flex flex-col justify-center items-center">
    <audio class="mt-4" controls>
      <source src={audioSrc} type="audio/ogg" />
      Your browser dows not support the audio element.
    </audio>
  </div>
  
</MainLayout>

<script>

import type { FavoritePokemon } from "@interfaces/FavoritePokemon";

/*
  interface FavoritePokemon {
    name: string;
    id: number;
  }*/
/*
  document.addEventListener('astro:after-preparation', () => {
    console.log('after-preparation')
  })

  document.addEventListener('astro:before-preparation', () => {
    console.log('before-preparation')
  })

  document.addEventListener('astro:after-swap', () => {
    console.log('after-swap')
  })

  document.addEventListener('astro:before-swap', () => {
    console.log('before-swap')
  })

  document.addEventListener('astro:page-load', () => {
    console.log('page-load')
  })*/

  const handlePageLoad = () => {

  let favoritePokemons: FavoritePokemon[] = JSON.parse(localStorage.getItem('favorite') ?? '[]')

  const btnFavorite = document.querySelector(
      "#btn-favorite"
    ) as HTMLButtonElement;

    if (!btnFavorite) return;

    const name = btnFavorite?.dataset.name ?? '';
    const id = btnFavorite?.dataset.id ?? '';

    const heartOutline = btnFavorite.querySelector('[data-outline]') as HTMLElement
    const heartFull = btnFavorite.querySelector('[data-full]') as HTMLElement

  const isFavorite = favoritePokemons.some(fav => fav.name === name)

  if(isFavorite) {
    heartOutline.classList.add('hidden');
    heartFull.classList.remove('hidden');
  }


    const toggleFavorite = () => {
      const isFavorite = favoritePokemons.some((fav) => fav.name === name)

      if(isFavorite) {

        favoritePokemons = favoritePokemons.filter((fav) => fav.name !== name)
      } else {
        favoritePokemons.push({id: +id, name: name})
      }

      localStorage.setItem('favorite', JSON.stringify(favoritePokemons))
    }


    btnFavorite.addEventListener("click", () => {
      heartOutline.classList.toggle('hidden')
      heartFull.classList.toggle('hidden')
      toggleFavorite()
    });
  }

  document.addEventListener("astro:page-load", handlePageLoad); 
</script>

<style>
  a {
    @apply hover:underline text-blue-500;
  }

  #btn-favorite {
    @apply hover:animate-pulse;
  }
</style>
